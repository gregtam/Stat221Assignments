{
    "contents" : "library(mvtnorm)\n\nrandom.orthogonal = function(p)\n{\n  # Get an orthogonal matrix.\n  B = matrix(runif(p^2), nrow=p)\n  qr.Q(qr(B))\n}\n\n\n#SGD\nsample.data.sgd = function(dim.t, dim.p, model=\"gaussian\")\n{\n  # Samples the covariates as normal with the specific correlation\n  \n  # Create A matrix (variance of the covariates xn)\n  Q = random.orthogonal(p=dim.p)\n  lambdas = c(1,1,1,rep(0.02,97))\n  A = Q %*% diag(lambdas) %*% t(Q)\n  \n  X = rmvnorm(dim.t, mean=rep(0, dim.p), sigma=diag(1,dim.p))\n  theta = matrix(1, nrow=dim.t, ncol=dim.p)\n  # Data generation\n  \n  gamma_t = 1/(1+0.02 * 1:dim.t)\n  \n  Sys.time()\n  for(i in 2:dim.t)\n    theta[i,] = theta[i-1,] - gamma_t[i-1]*2*A %*% (theta[i-1,] - X[i-1,])\n  Sys.time()\n  \n  sgd_risk = sapply(1:dim.t, function(i) theta[i,] %*% A %*% theta[i,])\n  return(list(Yplot=log10(sgd_risk)))\n}\n#ASGD Good\nsample.data.asgd.good = function(dim.t, dim.p, model=\"gaussian\")\n{\n  # Samples the covariates as normal with the specific correlation\n  \n  # Create A matrix (variance of the covariates xn)\n  Q = random.orthogonal(p=dim.p)\n  lambdas = c(1,1,1,rep(0.02,97))\n  A = Q %*% diag(lambdas) %*% t(Q)\n  \n  X = rmvnorm(dim.t, mean=rep(0, dim.p), sigma=diag(1,dim.p))\n  theta = matrix(1, nrow=dim.t, ncol=dim.p)\n  \n  # Data generation\n  gamma_t = (1+0.02 * 1:dim.t)^(-2/3)\n  \n  theta_mean_mat = matrix(1,nrow=dim.t,ncol=dim.p)\n  Sys.time()\n  for(i in 2:dim.t)\n  {\n    theta[i,] = theta[i-1,] - gamma_t[i-1]*2*A %*% (theta[i-1,] - X[i-1,])\n    #calculates the next average based on previous average, size, and the next theta vector\n    theta_mean_mat[i,] = (theta_mean_mat[i-1,]*(i-1)+theta[i,])/i\n  }\n  Sys.time()\n  \n  asgd_good_risk = sapply(1:dim.t, function(i) theta_mean_mat[i,] %*% A %*% theta_mean_mat[i,])\n  return(list(Yplot=log10(asgd_good_risk)))\n}\n#ASGD Bad\nsample.data.asgd.bad = function(dim.t, dim.p, model=\"gaussian\")\n{\n  # Samples the covariates as normal with the specific correlation\n  \n  # Create A matrix (variance of the covariates xn)\n  Q = random.orthogonal(p=dim.p)\n  lambdas = c(1,1,1,rep(0.02,97))\n  A = Q %*% diag(lambdas) %*% t(Q)\n  \n  X = rmvnorm(dim.t, mean=rep(0, dim.p), sigma=diag(1,dim.p))\n  theta = matrix(1, nrow=dim.t, ncol=dim.p)\n  # Data generation\n  \n  gamma_t = (1+1:dim.t)^(-1/2)\n  \n  theta_mean_mat = matrix(1,nrow=dim.t,ncol=dim.p)\n  Sys.time()\n  for(i in 2:dim.t)\n  {\n    theta[i,] = theta[i-1,] - gamma_t[i-1]*2*A %*% (theta[i-1,] - X[i-1,])\n    #calculates the next average based on previous average, size, and the next theta vector\n    theta_mean_mat[i,] = (theta_mean_mat[i-1,]*(i-1)+theta[i,])/i\n  }\n  Sys.time()\n  \n  asgd_bad_risk = sapply(1:dim.t, function(i) theta_mean_mat[i,] %*% A %*% theta_mean_mat[i,])\n  return(list(Yplot=log10(asgd_bad_risk)))\n}\n#Implicit\nsample.data.implicit = function(dim.t, dim.p, model=\"gaussian\")\n{\n  # Samples the covariates as normal with the specific correlation\n  \n  # Create A matrix (variance of the covariates xn)\n  Q = random.orthogonal(p=dim.p)\n  lambdas = c(1,1,1,rep(0.02,97))\n  A = Q %*% diag(lambdas) %*% t(Q)\n  \n  X = rmvnorm(dim.t, mean=rep(0, dim.p), sigma=diag(1,dim.p))\n  theta = matrix(1, nrow=dim.t, ncol=dim.p)\n  # Data generation\n  \n  gamma_t = (1+0.02 *1:dim.t)^(-1/2)\n  \n  Sys.time()\n  for(i in 2:dim.t)\n    theta[i,] = solve(diag(dim.p) + gamma_t[i-1]*2*A) %*% (theta[i-1,] + gamma_t[i-1]*2*A %*% X[i-1,])\n  Sys.time()\n  \n  implicit_risk = sapply(1:dim.t, function(i) theta[i,] %*% A %*% theta[i,])\n  return(list(Yplot=log10(implicit_risk)))\n}\n#Batch\nsample.data.batch = function(dim.t, dim.p, model=\"gaussian\")\n{\n  # Samples the covariates as normal with the specific correlation\n  \n  # Create A matrix (variance of the covariates xn)\n  Q = random.orthogonal(p=dim.p)\n  lambdas = c(1,1,1,rep(0.02,97))\n  A = Q %*% diag(lambdas) %*% t(Q)\n  \n  X = rmvnorm(dim.t, mean=rep(0, dim.p), sigma=diag(1,dim.p))\n  theta = matrix(1, nrow=dim.t, ncol=dim.p)\n  # Data generation\n  \n  gamma_t = (1+0.02 *1:dim.t)^(-1)\n  \n  Sys.time()\n  theta[1,] = X[1,]\n  for(i in 2:dim.t)\n    theta[i,] = (theta[i-1,]*(i-1) + X[i,])/i\n  Sys.time()\n  \n  batch_risk = sapply(1:dim.t, function(i) theta[i,] %*% A %*% theta[i,])\n  return(list(Yplot=log10(batch_risk)))\n}\n\n\nstart_time = Sys.time()\ndata.sgd = sample.data.sgd(dim.t = 1000000, dim.p = 100)\ndata.asgd.good = sample.data.asgd.good(dim.t = 1000000, dim.p = 100)\ndata.asgd.bad = sample.data.asgd.bad(dim.t = 1000000, dim.p = 100)\ndata.implicit = sample.data.implicit(dim.t = 1000000, dim.p = 100)\ndata.batch = sample.data.batch(dim.t = 1000000, dim.p = 100)\nend_time = Sys.time()\ntotal_time =  as.numeric(end_time-start_time,units=\"mins\")\n\n\nsave(list=c(\"data.sgd\",\"data.asgd.good\",\"data.asgd.bad\",\"data.implicit\",\"data.batch\",\"start_time\",\"end_time\",\"total_time\"), file=\"odyssey/pset3/2a.rda\")\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1423632178957.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3544593081",
    "id" : "2DA73AFE",
    "lastKnownWriteTime" : 1413873072,
    "path" : "~/Documents/School/Harvard/Third Semester/STAT 221/Assignments/Ass3/Ass3 R Code/221Ass3-Q2-a.R",
    "project_path" : "221Ass3-Q2-a.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}