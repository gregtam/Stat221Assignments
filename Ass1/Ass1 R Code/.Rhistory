loglikeli
exp(loglikeli)
loglikeli=0
for(row in 1:nrow(U))
loglikeli = loglikeli + log(dlogisticnorm(as.numeric(U[row,]),tempMu, tempAlpha, tempBeta))
loglikeli
exp(loglikeli)
logisticnorm.mle = function(U)
{
wrapper = function(param)
{
tempMu = param[3:length(param)]
d=length(tempMu)
tempAlpha = abs(param[1])
tempBeta = abs(param[2])
loglikeli=0
for(row in 1:nrow(U))
loglikeli = loglikeli + log(dlogisticnorm(as.numeric(U[row,]),tempMu, tempAlpha, tempBeta))
}
tempparam = c(1,1,rep(1,ncol(ldata)))
tempoptim = optim(tempparam, wrapper, control=list(fnscale=-1))
tempoptim = optim(tempparam, wrapper, control=list(fnscale=-1))$par
tempoptim
mu.hat = tempoptim[3:length(tempoptim)]
alpha.hat = tempoptim[1]
beta.hat = tempoptim[2]
list("mu.hat" = mu.hat, "alpha.hat" = alpha.hat, "beta.hat" = beta.hat)
}
ans = logisticnorm.mle(c(0.6,0.1,0.03))
dlogisticnorm(c(0.6,0.1,0.03), ans$mu.hat, ans$alpha.hat, ans$beta.hat)
ans = logisticnorm.mle(c(0.6,0.1,0.03))
dlogisticnorm(c(0.6,0.1,0.03), ans$mu.hat, ans$alpha.hat, ans$beta.hat)
mu = ans$mu.hat
alpha = ans$alpha.hat
beta = ans$beta.hat
logisticnorm.mle(ldata[1,])
logisticnorm.mle(ldata)
logisticnorm.mle = function(U)
{
wrapper = function(param)
{
tempMu = param[3:length(param)]
d=length(tempMu)
tempAlpha = abs(param[1])
tempBeta = abs(param[2])
loglikeli=0
for(row in 1:nrow(U))
loglikeli = loglikeli + log(dlogisticnorm(as.numeric(U[row,]),tempMu, tempAlpha, tempBeta))
loglikeli
}
tempparam = c(1,1,rep(1,ncol(ldata)))
tempoptim = optim(tempparam, wrapper, control=list(fnscale=-1))
tempoptim = optim(tempparam, wrapper, control=list(fnscale=-1))$par
tempoptim
mu.hat = tempoptim[3:length(tempoptim)]
alpha.hat = tempoptim[1]
beta.hat = tempoptim[2]
list("mu.hat" = mu.hat, "alpha.hat" = alpha.hat, "beta.hat" = beta.hat)
}
ans = logisticnorm.mle(c(0.6,0.1,0.03))
dlogisticnorm(c(as.numeric(ldata[1,]),2),tempMu,tempAlpha,tempBeta)
u
ldat
ldata
U
wrapper = function(param)
{
tempMu = param[3:length(param)]
d=length(tempMu)
tempAlpha = abs(param[1])
tempBeta = abs(param[2])
loglikeli=0
for(row in 1:nrow(U))
loglikeli = loglikeli + log(dlogisticnorm(as.numeric(U[row,]),tempMu, tempAlpha, tempBeta))
loglikeli
}
tempMu = param[3:length(param)]
d=length(tempMu)
tempAlpha = abs(param[1])
tempBeta = abs(param[2])
loglikeli=0
for(row in 1:nrow(U))
loglikeli = loglikeli + log(dlogisticnorm(as.numeric(U[row,]),tempMu, tempAlpha, tempBeta))
loglikeli
tempparam = c(1,1,rep(1,ncol(ldata)))
tempoptim = optim(tempparam, wrapper, control=list(fnscale=-1))
tempoptim = optim(tempparam, wrapper, control=list(fnscale=-1))$par
tempoptim
f
tempoptim
mu.hat = tempoptim[3:length(tempoptim)]
alpha.hat = tempoptim[1]
beta.hat = tempoptim[2]
list("mu.hat" = mu.hat, "alpha.hat" = alpha.hat, "beta.hat" = beta.hat)
dlogisticnorm(U,tempMu,tempAlpha,tempBeta)
c(as.numeric(ldata[1,]),2)
dlogisticnorm(c(as.numeric(ldata[1,]),2),tempMu,tempAlpha,tempBeta)
dlogisticnorm(as.numeric(ldata[1,]),tempMu,tempAlpha,tempBeta)
dlogisticnorm(ldata,tempMu,tempAlpha,tempBeta)
logisticnorm.mle(ldata[1,])
logisticnorm.mle(ldata)
tempans = logisticnorm.mle(c(0.2,0.3,0.1))
source('~/.active-rstudio-document', echo=TRUE)
logisticnorm.mle = function(U)
{
wrapper = function(param)
{
tempMu = param[3:length(param)]
d=length(tempMu)
tempAlpha = abs(param[1])
tempBeta = abs(param[2])
loglikeli=0
for(row in 1:nrow(U))
loglikeli = loglikeli + log(dlogisticnorm(as.numeric(U[row,]),tempMu, tempAlpha, tempBeta))
loglikeli
}
tempparam = c(1,1,rep(1,ncol(ldata)))
tempoptim = optim(tempparam, wrapper, control=list(fnscale=-1))$par
mu.hat = tempoptim[3:length(tempoptim)]
alpha.hat = tempoptim[1]
beta.hat = tempoptim[2]
list("mu.hat" = mu.hat, "alpha.hat" = alpha.hat, "beta.hat" = beta.hat)
}
logisticnorm.mle(ldata)
optG
optTheta
#2.2
load("theta0list.Rdata")
data1985 = read.table("data1985_area2.csv")
X = data1985
#changes gleba from 1's and 2's to 1's and 0's
tempGleba = ifelse(as.vector(X[-1,2])=='1',0,1)
tempGleba = c("gleba", tempGleba)
as.factor(tempGleba)
X[,2] = as.factor(tempGleba)
ll = function(G, theta, X)
{
#two make things easier to read, theta is a list of lists of vectors
N = dim(G)[1]
P = length(theta)
log_likelihood_sum = 0
for(n in 1:N) #for each observation
{
for(p in 1:P) #for each feature
{
val_H = theta[[p]]$high[X[n,p]]
val_L = theta[[p]]$low[X[n,p]]
if(G[n,1] * val_H + G[n,2] * val_L == 0)
log_likelihood_sum = log_likelihood_sum + 1e-16
else
log_likelihood_sum = log_likelihood_sum + log(G[n,1] * val_H + G[n,2] * val_L)
}
}
log_likelihood_sum
}
opt=()
for(i in 1:length(G))
opt[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = "L-BFGS-B", theta = theta0List, X = X[-1,-1], G=G,index=i)
G = matrix(0.5,nrow=69,ncol=2)
X = data1985
Sys.time()
optim(0.5, ll.G, control=list(fnscale=-1), method = "L-BFGS-B", theta = theta0List, X = X, G=G,index=1)
Sys.time()
optim(c(X), ll, control=list(fnscale=-1), G = G, theta = theta0List)
#2.3
gomMLE = function(X, G0, theta0)
{
ll.G = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
G[index] = param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
ll.thetaL = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
#u_i
scaled_param = exp(param)/(sum(exp(param)))
theta[[index]]$low = scaled_param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
ll.thetaH = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
#u_i
scaled_param = exp(param)/(sum(exp(param)))
theta[[index]]$high = scaled_param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
optTheta = theta0List
optG = G
likeli=c()
for(counter in 1:11)
{
print(paste("Doing Count", counter, Sys.time()))
#optimize G
for(i in 1:69)
optG[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = "L-BFGS-B", lower=0, upper=1, theta = optTheta, X=X, G=optG, index=i)$par
optG[,2] = 1-optG[,1]
#optimize thetaL
for(index in 1:length(theta))
{
#optimize thetaL
init = rep(0,length(theta[[index]]$low))
thetaL = optim(init, ll.thetaL, control=list(fnscale=-1), method = "L-BFGS-B", theta = optTheta,X=X,G=optG,index=index)$par
optL = exp(thetaL)/(sum(exp(thetaL)))
optL
optTheta[[index]]$level = c(1: length(optL)-1)
optTheta[[index]]$low = optL
}
for(index in 1:length(theta))
{
#optimize thetaH
init = rep(0,length(theta[[index]]$high))
thetaH = optim(init, ll.thetaH, control=list(fnscale=-1), method = "L-BFGS-B", theta = optTheta,X=X,G=optG,index=index)$par
optH = exp(thetaH)/(sum(exp(thetaH)))
optH
optTheta[[index]]$high = optH
}
likeli[counter] = ll(optG, optTheta,X[-1,-1])
}
list(G.hat = optG, theta.hat = optTheta, maxlik=likeli[length(likeli)])
}
gomMLE(X,G,theta)
#2.2
load("theta0list.Rdata")
data1985 = read.table("data1985_area2.csv")
X = data1985
#changes gleba from 1's and 2's to 1's and 0's
tempGleba = ifelse(as.vector(X[-1,2])=='1',0,1)
tempGleba = c("gleba", tempGleba)
as.factor(tempGleba)
X[,2] = as.factor(tempGleba)
ll = function(G, theta, X)
{
#two make things easier to read, theta is a list of lists of vectors
N = dim(G)[1]
P = length(theta)
log_likelihood_sum = 0
for(n in 1:N) #for each observation
{
for(p in 1:P) #for each feature
{
val_H = theta[[p]]$high[X[n,p]]
val_L = theta[[p]]$low[X[n,p]]
if(G[n,1] * val_H + G[n,2] * val_L == 0)
log_likelihood_sum = log_likelihood_sum + 1e-16
else
log_likelihood_sum = log_likelihood_sum + log(G[n,1] * val_H + G[n,2] * val_L)
}
}
log_likelihood_sum
}
opt=()
for(i in 1:length(G))
opt[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = "L-BFGS-B", theta = theta0List, X = X[-1,-1], G=G,index=i)
G = matrix(0.5,nrow=69,ncol=2)
X = data1985
Sys.time()
optim(0.5, ll.G, control=list(fnscale=-1), method = "L-BFGS-B", theta = theta0List, X = X, G=G,index=1)
Sys.time()
optim(c(X), ll, control=list(fnscale=-1), G = G, theta = theta0List)
#2.3
gomMLE = function(X, G0, theta0)
{
ll.G = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
G[index] = param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
ll.thetaL = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
#u_i
scaled_param = exp(param)/(sum(exp(param)))
theta[[index]]$low = scaled_param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
ll.thetaH = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
#u_i
scaled_param = exp(param)/(sum(exp(param)))
theta[[index]]$high = scaled_param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
optTheta = theta0List
optG = G
likeli=c()
for(counter in 1:11)
{
print(paste("Doing Count", counter, Sys.time()))
#optimize G
for(i in 1:69)
optG[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = "L-BFGS-B", lower=0, upper=1, theta = optTheta, X=X, G=optG, index=i)$par
optG[,2] = 1-optG[,1]
#optimize thetaL
for(index in 1:length(theta))
{
#optimize thetaL
init = rep(0,length(theta[[index]]$low))
thetaL = optim(init, ll.thetaL, control=list(fnscale=-1), method = "L-BFGS-B", theta = optTheta,X=X,G=optG,index=index)$par
optL = exp(thetaL)/(sum(exp(thetaL)))
optL
optTheta[[index]]$level = c(1: length(optL)-1)
optTheta[[index]]$low = optL
}
for(index in 1:length(theta))
{
#optimize thetaH
init = rep(0,length(theta[[index]]$high))
thetaH = optim(init, ll.thetaH, control=list(fnscale=-1), method = "L-BFGS-B", theta = optTheta,X=X,G=optG,index=index)$par
optH = exp(thetaH)/(sum(exp(thetaH)))
optH
optTheta[[index]]$high = optH
}
likeli[counter] = ll(optG, optTheta,X[-1,-1])
}
list(G.hat = optG, theta.hat = optTheta, maxlik=likeli[length(likeli)])
}
gomMLE(X,G,theta)
ll.G = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
G[index] = param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
ll.thetaL = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
#u_i
scaled_param = exp(param)/(sum(exp(param)))
theta[[index]]$low = scaled_param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
ll.thetaH = function(param, G, index, theta, X)
{
N = length(G)/2
P = length(theta)
log_likelihood_sum = 0
#u_i
scaled_param = exp(param)/(sum(exp(param)))
theta[[index]]$high = scaled_param
getHighVal = function(p,n)
{
theta[[p]]$high[Xmin[n,p]]
}
getLowVal = function(p,n)
{
theta[[p]]$low[Xmin[n,p]]
}
val_H = sapply(1:49, getHighVal,n=1:69)
val_L = sapply(1:49, getLowVal,n=1:69)
val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])
val_G2 = 1 - val_G
mix = val_G * val_H + val_G2 * val_L
sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))
}
optTheta = theta0List
optG = G
likeli=c()
for(counter in 1:11)
{
print(paste("Doing Count", counter, Sys.time()))
#optimize G
for(i in 1:69)
optG[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = "L-BFGS-B", lower=0, upper=1, theta = optTheta, X=X, G=optG, index=i)$par
optG[,2] = 1-optG[,1]
#optimize thetaL
for(index in 1:length(theta))
{
#optimize thetaL
init = rep(0,length(theta[[index]]$low))
thetaL = optim(init, ll.thetaL, control=list(fnscale=-1), method = "L-BFGS-B", theta = optTheta,X=X,G=optG,index=index)$par
optL = exp(thetaL)/(sum(exp(thetaL)))
optL
optTheta[[index]]$level = c(1: length(optL)-1)
optTheta[[index]]$low = optL
}
for(index in 1:length(theta))
{
#optimize thetaH
init = rep(0,length(theta[[index]]$high))
thetaH = optim(init, ll.thetaH, control=list(fnscale=-1), method = "L-BFGS-B", theta = optTheta,X=X,G=optG,index=index)$par
optH = exp(thetaH)/(sum(exp(thetaH)))
optH
optTheta[[index]]$high = optH
}
likeli[counter] = ll(optG, optTheta,X[-1,-1])
}
list(G.hat = optG, theta.hat = optTheta, maxlik=likeli[length(likeli)])
