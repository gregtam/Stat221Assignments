{
    "contents" : "# ll.G = function(par, G, index, theta, X)\n# {\n#   N = length(G)/2\n#   P = length(theta)\n#   log_likelihood_sum = 0\n#   G[index]=par\n#   for(n in 1:N) #for each observation\n#   {\n#     for(p in 1:P) #for each feature\n#     {\n#       val_H = theta[[p]]$high[X[-1,-1][n,p]]\n#       val_L = theta[[p]]$low[X[-1,-1][n,p]]\n#       if(G[n] * val_H + G[n + N/2] * val_L == 0)\n#         log_likelihood_sum = log_likelihood_sum + 1e-16\n#       else\n#         log_likelihood_sum = log_likelihood_sum + log(G[n] * val_H + G[n + N/2] * val_L)\n#     }\n#   }\n#   log_likelihood_sum\n# }\n# ll.G(1,G,1,theta0List,X)\n# \n# opt[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = \"L-BFGS-B\", theta = theta0List, X=X[-1,-1], G=G, index=1)\n# \n# getHighVal = function(p,n)\n# {\n#   theta0List[[p]]$high[X[-1,-1][n,p]]\n# }\n# getLowVal = function(p,n)\n# {\n#   theta0List[[p]]$low[X[-1,-1][n,p]]\n# }\n# sapply(1:49, getHighVal,1:69)\n# sapply(1:49, getLowVal,1:69)\n\n\n\nll.G = function(param, G, index, theta, X)\n{\n  N = length(G)/2\n  P = length(theta)\n  log_likelihood_sum = 0\n  G[index] = param\n  \n  getHighVal = function(p,n)\n  {\n    theta[[p]]$high[Xmin[n,p]]\n  }\n  getLowVal = function(p,n)\n  {\n    theta[[p]]$low[Xmin[n,p]]\n  }\n  val_H = sapply(1:49, getHighVal,n=1:69)\n  val_L = sapply(1:49, getLowVal,n=1:69)\n  \n  val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])\n  val_G2 = 1 - val_G\n  \n  mix = val_G * val_H + val_G2 * val_L\n  sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))\n}\nll.G(1,G,1,theta0List,X)\n\n\nll.thetaL = function(param, G, index, theta, X)\n{\n  N = length(G)/2\n  P = length(theta)\n  log_likelihood_sum = 0\n  #u_i\n  scaled_param = exp(param)/(sum(exp(param)))\n  theta[[index]]$low = scaled_param\n  \n  getHighVal = function(p,n)\n  {\n    theta[[p]]$high[Xmin[n,p]]\n  }\n  getLowVal = function(p,n)\n  {\n    theta[[p]]$low[Xmin[n,p]]\n  }\n  val_H = sapply(1:49, getHighVal,n=1:69)\n  val_L = sapply(1:49, getLowVal,n=1:69)\n  \n  val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])\n  val_G2 = 1 - val_G\n  \n  mix = val_G * val_H + val_G2 * val_L\n  sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))\n}\nll.thetaL(0.2,G,3,theta0List,X)\n\n\n\nll.thetaH = function(param, G, index, theta, X)\n{\n  N = length(G)/2\n  P = length(theta)\n  log_likelihood_sum = 0\n  #u_i\n  scaled_param = exp(param)/(sum(exp(param)))\n  theta[[index]]$high = scaled_param\n  \n  getHighVal = function(p,n)\n  {\n    theta[[p]]$high[Xmin[n,p]]\n  }\n  getLowVal = function(p,n)\n  {\n    theta[[p]]$low[Xmin[n,p]]\n  }\n  val_H = sapply(1:49, getHighVal,n=1:69)\n  val_L = sapply(1:49, getLowVal,n=1:69)\n  \n  val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])\n  val_G2 = 1 - val_G\n  \n  mix = val_G * val_H + val_G2 * val_L\n  sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))\n}\nll.thetaH(0.3,G,3,theta0List,X)\n\n\n\nSys.time()\noptTheta = theta0List\noptG = G\nlikeli=c()\nfor(counter in 1:11)\n{\n  print(paste(\"Doing Count\", counter, Sys.time()))\n  #optimize G\n  for(i in 1:69)\n    optG[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = \"L-BFGS-B\", lower=0, upper=1, theta = optTheta, X=X, G=optG, index=i)$par\n  optG[,2] = 1-optG[,1]\n  \n  \n  #optimize thetaL\n  for(index in 1:length(theta))\n  {\n    #optimize thetaL\n    init = rep(0,length(theta[[index]]$low))\n    thetaL = optim(init, ll.thetaL, control=list(fnscale=-1), method = \"L-BFGS-B\", theta = optTheta,X=X,G=optG,index=index)$par\n    optL = exp(thetaL)/(sum(exp(thetaL)))\n    optL\n    optTheta[[index]]$level = c(1: length(optL)-1)\n    optTheta[[index]]$low = optL\n  }\n  for(index in 1:length(theta))\n  {\n    #optimize thetaH\n    init = rep(0,length(theta[[index]]$high))\n    thetaH = optim(init, ll.thetaH, control=list(fnscale=-1), method = \"L-BFGS-B\", theta = optTheta,X=X,G=optG,index=index)$par\n    optH = exp(thetaH)/(sum(exp(thetaH)))\n    optH\n    optTheta[[index]]$high = optH\n  }\n  likeli[counter] = ll(optG, optTheta,X[-1,-1])\n}\nSys.time()\n\nll(optG, optTheta, X[-1,-1])\n\n\n\n\n\n\n\n\n\n#TEST\nx = seq(0,1,0.01)\ny = c()\nfor(i in x)\n  y = c(y, ll.G(i, G, 1, theta0List, X))\nplot(x,y,type='l')\n\n\n\n\n\n\n",
    "created" : 1411428250695.000,
    "dirty" : true,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4000773670",
    "id" : "1BD60368",
    "lastKnownWriteTime" : 1411523523,
    "path" : "~/Documents/School/Harvard/Third Semester/STAT 221/Assignments/Ass1/Ass1 R Code/TEMP 2.3.R",
    "project_path" : "TEMP 2.3.R",
    "properties" : {
        "tempName" : "Untitled3"
    },
    "source_on_save" : false,
    "type" : "r_source"
}