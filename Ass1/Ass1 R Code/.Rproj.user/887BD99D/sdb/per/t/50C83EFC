{
    "contents" : "#2.2\nload(\"theta0list.Rdata\")\ndata1985 = read.table(\"data1985_area2.csv\")\nX = data1985\n#changes gleba from 1's and 2's to 1's and 0's\ntempGleba = ifelse(as.vector(X[-1,2])=='1',0,1)\ntempGleba = c(\"gleba\", tempGleba)\nas.factor(tempGleba)\nX[,2] = as.factor(tempGleba)\n\nll = function(G, theta, X)\n{\n  #two make things easier to read, theta is a list of lists of vectors\n  N = dim(G)[1]\n  P = length(theta)\n  log_likelihood_sum = 0\n  \n  for(n in 1:N) #for each observation\n  {\n    for(p in 1:P) #for each feature\n    {\n      val_H = theta[[p]]$high[X[n,p]]\n      val_L = theta[[p]]$low[X[n,p]]\n      if(G[n,1] * val_H + G[n,2] * val_L == 0)\n        log_likelihood_sum = log_likelihood_sum + 1e-16\n      else\n        log_likelihood_sum = log_likelihood_sum + log(G[n,1] * val_H + G[n,2] * val_L)\n    }\n  }\n  log_likelihood_sum\n}\n\nopt=()\nfor(i in 1:length(G))\n  opt[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = \"L-BFGS-B\", theta = theta0List, X = X[-1,-1], G=G,index=i)\n\n\n\nG = matrix(0.5,nrow=69,ncol=2)\nX = data1985\n\nSys.time()\noptim(0.5, ll.G, control=list(fnscale=-1), method = \"L-BFGS-B\", theta = theta0List, X = X, G=G,index=1)\nSys.time()\n\noptim(c(X), ll, control=list(fnscale=-1), G = G, theta = theta0List)\n\n\n#2.3\ngomMLE = function(X, G0, theta0)\n{\n  ll.G = function(param, G, index, theta, X)\n  {\n    N = length(G)/2\n    P = length(theta)\n    log_likelihood_sum = 0\n    G[index] = param\n    \n    getHighVal = function(p,n)\n    {\n      theta[[p]]$high[Xmin[n,p]]\n    }\n    getLowVal = function(p,n)\n    {\n      theta[[p]]$low[Xmin[n,p]]\n    }\n    val_H = sapply(1:49, getHighVal,n=1:69)\n    val_L = sapply(1:49, getLowVal,n=1:69)\n    \n    val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])\n    val_G2 = 1 - val_G\n    \n    mix = val_G * val_H + val_G2 * val_L\n    sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))\n  }\n  ll.thetaL = function(param, G, index, theta, X)\n  {\n    N = length(G)/2\n    P = length(theta)\n    log_likelihood_sum = 0\n    #u_i\n    scaled_param = exp(param)/(sum(exp(param)))\n    theta[[index]]$low = scaled_param\n    \n    getHighVal = function(p,n)\n    {\n      theta[[p]]$high[Xmin[n,p]]\n    }\n    getLowVal = function(p,n)\n    {\n      theta[[p]]$low[Xmin[n,p]]\n    }\n    val_H = sapply(1:49, getHighVal,n=1:69)\n    val_L = sapply(1:49, getLowVal,n=1:69)\n    \n    val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])\n    val_G2 = 1 - val_G\n    \n    mix = val_G * val_H + val_G2 * val_L\n    sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))\n  }\n  ll.thetaH = function(param, G, index, theta, X)\n  {\n    N = length(G)/2\n    P = length(theta)\n    log_likelihood_sum = 0\n    #u_i\n    scaled_param = exp(param)/(sum(exp(param)))\n    theta[[index]]$high = scaled_param\n    \n    getHighVal = function(p,n)\n    {\n      theta[[p]]$high[Xmin[n,p]]\n    }\n    getLowVal = function(p,n)\n    {\n      theta[[p]]$low[Xmin[n,p]]\n    }\n    val_H = sapply(1:49, getHighVal,n=1:69)\n    val_L = sapply(1:49, getLowVal,n=1:69)\n    \n    val_G = matrix(G[1:N], nrow=N,ncol=dim(val_H)[2])\n    val_G2 = 1 - val_G\n    \n    mix = val_G * val_H + val_G2 * val_L\n    sum(log(ifelse(mix>0, mix, mix+exp(1e-16))))\n  }\n  \n  \n  optTheta = theta0List\n  optG = G\n  likeli=c()\n  \n  for(counter in 1:11)\n  {\n    print(paste(\"Doing Count\", counter, Sys.time()))\n    #optimize G\n    for(i in 1:69)\n      optG[i] = optim(0.5, ll.G, control=list(fnscale=-1), method = \"L-BFGS-B\", lower=0, upper=1, theta = optTheta, X=X, G=optG, index=i)$par\n    optG[,2] = 1-optG[,1]\n    \n    \n    #optimize thetaL\n    for(index in 1:length(theta))\n    {\n      #optimize thetaL\n      init = rep(0,length(theta[[index]]$low))\n      thetaL = optim(init, ll.thetaL, control=list(fnscale=-1), method = \"L-BFGS-B\", theta = optTheta,X=X,G=optG,index=index)$par\n      optL = exp(thetaL)/(sum(exp(thetaL)))\n      optL\n      optTheta[[index]]$level = c(1: length(optL)-1)\n      optTheta[[index]]$low = optL\n    }\n    for(index in 1:length(theta))\n    {\n      #optimize thetaH\n      init = rep(0,length(theta[[index]]$high))\n      thetaH = optim(init, ll.thetaH, control=list(fnscale=-1), method = \"L-BFGS-B\", theta = optTheta,X=X,G=optG,index=index)$par\n      optH = exp(thetaH)/(sum(exp(thetaH)))\n      optH\n      optTheta[[index]]$high = optH\n    }\n    likeli[counter] = ll(optG, optTheta,X[-1,-1])\n  }\n  list(G.hat = optG, theta.hat = optTheta, maxlik=likeli[length(likeli)])\n}\n\ngomMLE(X,G,theta)\n\n\n\n\n\n\n",
    "created" : 1411243275984.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1840466840",
    "id" : "50C83EFC",
    "lastKnownWriteTime" : 1411525727,
    "path" : "~/Documents/School/Harvard/Third Semester/STAT 221/Assignments/Ass1/Ass1 R Code/221Ass1-Q2.R",
    "project_path" : "221Ass1-Q2.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : false,
    "type" : "r_source"
}